// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: announce.proto

package simpals_test_project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnnouncementsService_CreateAnnouncement_FullMethodName = "/announcements_portal.AnnouncementsService/CreateAnnouncement"
)

// AnnouncementsServiceClient is the client API for AnnouncementsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementsServiceClient interface {
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*AnnouncementResponse, error)
}

type announcementsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementsServiceClient(cc grpc.ClientConnInterface) AnnouncementsServiceClient {
	return &announcementsServiceClient{cc}
}

func (c *announcementsServiceClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*AnnouncementResponse, error) {
	out := new(AnnouncementResponse)
	err := c.cc.Invoke(ctx, AnnouncementsService_CreateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementsServiceServer is the server API for AnnouncementsService service.
// All implementations must embed UnimplementedAnnouncementsServiceServer
// for forward compatibility
type AnnouncementsServiceServer interface {
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*AnnouncementResponse, error)
	mustEmbedUnimplementedAnnouncementsServiceServer()
}

// UnimplementedAnnouncementsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementsServiceServer struct {
}

func (UnimplementedAnnouncementsServiceServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*AnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedAnnouncementsServiceServer) mustEmbedUnimplementedAnnouncementsServiceServer() {}

// UnsafeAnnouncementsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementsServiceServer will
// result in compilation errors.
type UnsafeAnnouncementsServiceServer interface {
	mustEmbedUnimplementedAnnouncementsServiceServer()
}

func RegisterAnnouncementsServiceServer(s grpc.ServiceRegistrar, srv AnnouncementsServiceServer) {
	s.RegisterService(&AnnouncementsService_ServiceDesc, srv)
}

func _AnnouncementsService_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementsServiceServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementsService_CreateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementsServiceServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementsService_ServiceDesc is the grpc.ServiceDesc for AnnouncementsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "announcements_portal.AnnouncementsService",
	HandlerType: (*AnnouncementsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnnouncement",
			Handler:    _AnnouncementsService_CreateAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "announce.proto",
}
